
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisador_sintatico;

import java.io.*;
import java_cup.runtime.*;
import analisador_sintatico.Yylex;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\002\003\000\002\002\004\000\002\003" +
    "\011\000\002\004\003\000\002\004\007\000\002\005\011" +
    "\000\002\022\003\000\002\022\005\000\002\022\004\000" +
    "\002\006\003\000\002\007\004\000\002\017\004\000\002" +
    "\017\005\000\002\017\004\000\002\017\006\000\002\010" +
    "\007\000\002\011\007\000\002\015\003\000\002\016\003" +
    "\000\002\013\004\000\002\013\004\000\002\013\004\000" +
    "\002\013\004\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\021" +
    "\006\000\002\021\006\000\002\021\006\000\002\021\010" +
    "\000\002\021\010\000\002\021\010\000\002\021\010\000" +
    "\002\021\010\000\002\021\010\000\002\021\010\000\002" +
    "\014\003\000\002\014\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\016\002\uffda\004\014\012\011\020\021\026" +
    "\020\036\016\001\002\000\022\002\ufffe\004\ufffe\012\ufffe" +
    "\015\ufffe\020\ufffe\025\123\026\ufffe\036\ufffe\001\002\000" +
    "\020\002\uffda\004\014\012\011\015\uffda\020\021\026\020" +
    "\036\016\001\002\000\006\016\115\027\116\001\002\000" +
    "\004\002\001\001\002\000\020\002\uffda\004\014\012\011" +
    "\015\uffda\020\021\026\020\036\016\001\002\000\004\027" +
    "\113\001\002\000\004\004\112\001\002\000\006\002\uffdb" +
    "\015\uffdb\001\002\000\004\013\061\001\002\000\020\002" +
    "\uffda\004\014\012\011\015\uffda\020\021\026\020\036\016" +
    "\001\002\000\004\004\ufff8\001\002\000\020\002\uffda\004" +
    "\014\012\011\015\uffda\020\021\026\020\036\016\001\002" +
    "\000\004\031\046\001\002\000\004\031\024\001\002\000" +
    "\004\002\023\001\002\000\004\002\000\001\002\000\010" +
    "\004\025\006\026\012\030\001\002\000\004\011\041\001" +
    "\002\000\004\011\037\001\002\000\004\032\033\001\002" +
    "\000\004\011\031\001\002\000\004\004\032\001\002\000" +
    "\006\010\uffe6\032\uffe6\001\002\000\004\014\034\001\002" +
    "\000\016\004\014\012\011\015\uffda\020\021\026\020\036" +
    "\016\001\002\000\004\015\036\001\002\000\022\002\uffff" +
    "\004\uffff\012\uffff\015\uffff\020\uffff\025\uffff\026\uffff\036" +
    "\uffff\001\002\000\004\004\040\001\002\000\006\010\uffe7" +
    "\032\uffe7\001\002\000\010\004\ufff0\006\ufff0\012\ufff0\001" +
    "\002\000\010\004\043\006\044\012\045\001\002\000\006" +
    "\010\uffea\032\uffea\001\002\000\006\010\uffe9\032\uffe9\001" +
    "\002\000\006\010\uffe8\032\uffe8\001\002\000\010\004\025" +
    "\006\026\012\030\001\002\000\004\032\053\001\002\000" +
    "\006\010\051\032\ufffb\001\002\000\012\004\025\006\026" +
    "\012\030\032\ufff9\001\002\000\004\032\ufffa\001\002\000" +
    "\004\014\054\001\002\000\016\004\014\012\011\015\uffda" +
    "\020\021\026\020\036\016\001\002\000\004\015\056\001" +
    "\002\000\020\002\ufffc\004\ufffc\012\ufffc\015\ufffc\020\ufffc" +
    "\026\ufffc\036\ufffc\001\002\000\006\002\uffec\015\uffec\001" +
    "\002\000\006\002\uffeb\015\uffeb\001\002\000\010\004\uffef" +
    "\006\uffef\012\uffef\001\002\000\010\004\063\006\064\012" +
    "\065\001\002\000\006\005\102\027\103\001\002\000\006" +
    "\005\074\027\075\001\002\000\006\005\066\027\067\001" +
    "\002\000\006\004\070\012\071\001\002\000\020\002\uffe3" +
    "\004\uffe3\012\uffe3\015\uffe3\020\uffe3\026\uffe3\036\uffe3\001" +
    "\002\000\004\027\073\001\002\000\004\027\072\001\002" +
    "\000\020\002\uffde\004\uffde\012\uffde\015\uffde\020\uffde\026" +
    "\uffde\036\uffde\001\002\000\020\002\uffe0\004\uffe0\012\uffe0" +
    "\015\uffe0\020\uffe0\026\uffe0\036\uffe0\001\002\000\006\004" +
    "\076\006\077\001\002\000\020\002\uffe4\004\uffe4\012\uffe4" +
    "\015\uffe4\020\uffe4\026\uffe4\036\uffe4\001\002\000\004\027" +
    "\101\001\002\000\004\027\100\001\002\000\020\002\uffdf" +
    "\004\uffdf\012\uffdf\015\uffdf\020\uffdf\026\uffdf\036\uffdf\001" +
    "\002\000\020\002\uffe1\004\uffe1\012\uffe1\015\uffe1\020\uffe1" +
    "\026\uffe1\036\uffe1\001\002\000\010\004\104\006\105\012" +
    "\106\001\002\000\020\002\uffe5\004\uffe5\012\uffe5\015\uffe5" +
    "\020\uffe5\026\uffe5\036\uffe5\001\002\000\004\027\111\001" +
    "\002\000\004\027\110\001\002\000\004\027\107\001\002" +
    "\000\020\002\uffdd\004\uffdd\012\uffdd\015\uffdd\020\uffdd\026" +
    "\uffdd\036\uffdd\001\002\000\020\002\uffdc\004\uffdc\012\uffdc" +
    "\015\uffdc\020\uffdc\026\uffdc\036\uffdc\001\002\000\020\002" +
    "\uffe2\004\uffe2\012\uffe2\015\uffe2\020\uffe2\026\uffe2\036\uffe2" +
    "\001\002\000\006\016\ufff7\027\ufff7\001\002\000\020\002" +
    "\ufff4\004\ufff4\012\ufff4\015\ufff4\020\ufff4\026\ufff4\036\ufff4" +
    "\001\002\000\006\002\uffed\015\uffed\001\002\000\006\004" +
    "\117\006\120\001\002\000\020\002\ufff6\004\ufff6\012\ufff6" +
    "\015\ufff6\020\ufff6\026\ufff6\036\ufff6\001\002\000\004\027" +
    "\121\001\002\000\020\002\ufff5\004\ufff5\012\ufff5\015\ufff5" +
    "\020\ufff5\026\ufff5\036\ufff5\001\002\000\020\002\ufff3\004" +
    "\ufff3\012\ufff3\015\ufff3\020\ufff3\026\ufff3\036\ufff3\001\002" +
    "\000\006\002\uffee\015\uffee\001\002\000\004\014\124\001" +
    "\002\000\016\004\014\012\011\015\uffda\020\021\026\020" +
    "\036\016\001\002\000\004\015\126\001\002\000\020\002" +
    "\ufffd\004\ufffd\012\ufffd\015\ufffd\020\ufffd\026\ufffd\036\ufffd" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\026\002\021\003\003\004\016\005\007\006" +
    "\011\007\005\013\012\014\006\017\004\021\014\001\001" +
    "\000\002\001\001\000\024\003\003\004\016\005\007\006" +
    "\011\007\005\013\012\014\121\017\004\021\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\003\003\004" +
    "\016\005\007\006\011\007\005\013\012\014\113\017\004" +
    "\021\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\061\001\001\000\024\003\003" +
    "\004\016\005\007\006\011\007\005\013\012\014\057\017" +
    "\004\021\014\001\001\000\002\001\001\000\024\003\003" +
    "\004\016\005\007\006\011\007\005\013\012\014\056\017" +
    "\004\021\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\026\001" +
    "\001\000\004\015\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\003\003\004\016\005\007" +
    "\006\011\007\005\013\012\014\034\017\004\021\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\047\022\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\047\022\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\003\003\004\016\005\007\006" +
    "\011\007\005\013\012\014\054\017\004\021\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\003\003\004\016\005\007\006\011\007\005\013" +
    "\012\014\124\017\004\021\014\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static void main (String args[]) throws Exception {
        new parser (new Yylex(System.in)).parse();
    }

    public String erro;
    
    public String getErro() {
        return erro;
    }

    public void syntax_error (Symbol s) {
        erro = ("Erro de sintaxe. Linha: " + (s.right + 1) +
        " Coluna: " + s.left + ". Texto: \"" + s.value + "\"");

        System.out.print(erro);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // s ::= expressao_repete 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // if ::= RESERVADO_IF PARENTESES_INICIO expressao_relacional PARENTESES_FIM CHAVE_INICIO expressao_repete CHAVE_FIM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // else ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // else ::= if RESERVADO_ELSE CHAVE_INICIO expressao_repete CHAVE_FIM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // while ::= RESERVADO_WHILE PARENTESES_INICIO op_logico PARENTESES_FIM CHAVE_INICIO expressao_repete CHAVE_FIM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // op_logico ::= expressao_relacional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_logico",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // op_logico ::= expressao_relacional OPERADOR_LOGICO op_logico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_logico",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // op_logico ::= expressao_relacional OPERADOR_LOGICO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_logico",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo_geral ::= TIPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_geral",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo_declaracao ::= tipo_geral ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracao",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo_atribuicao ::= tipo_declaracao FIM_LINHA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_atribuicao",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo_atribuicao ::= tipo_declaracao ATRIBUICAO NUMEROS_NATURAIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_atribuicao",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo_atribuicao ::= NUMEROS_REAIS FIM_LINHA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_atribuicao",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo_atribuicao ::= tipo_declaracao ATRIBUICAO ID FIM_LINHA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_atribuicao",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo_atribuicao_numero ::= TIPO_NUMERICO ID ATRIBUICAO NUMEROS_NATURAIS FIM_LINHA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_atribuicao_numero",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo_atribuicao_numero_reais ::= TIPO_NUMERICO ID ATRIBUICAO NUMEROS_REAIS FIM_LINHA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_atribuicao_numero_reais",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // op_relacional ::= OPERADOR_RELACIONAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_relacional",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // op_atribuicao ::= OPERADOR_ATRIBUICAO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_atribuicao",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expressao ::= tipo_atribuicao expressao_repete 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expressao ::= while expressao_repete 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expressao ::= else expressao_repete 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expressao ::= expressao_atribuicao expressao_repete 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expressao_relacional ::= ID op_relacional ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao_relacional",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expressao_relacional ::= ID op_relacional NUMEROS_NATURAIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao_relacional",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expressao_relacional ::= ID op_relacional NUMEROS_REAIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao_relacional",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expressao_relacional ::= NUMEROS_NATURAIS OPERADOR_RELACIONAL ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao_relacional",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expressao_relacional ::= NUMEROS_REAIS OPERADOR_RELACIONAL ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao_relacional",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expressao_atribuicao ::= ID op_atribuicao ID FIM_LINHA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao_atribuicao",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expressao_atribuicao ::= ID op_atribuicao NUMEROS_NATURAIS FIM_LINHA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao_atribuicao",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expressao_atribuicao ::= ID op_atribuicao NUMEROS_REAIS FIM_LINHA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao_atribuicao",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expressao_atribuicao ::= ID op_atribuicao ID OPERADOR_ARITMETICO ID FIM_LINHA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao_atribuicao",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expressao_atribuicao ::= ID op_atribuicao NUMEROS_NATURAIS OPERADOR_ARITMETICO ID FIM_LINHA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao_atribuicao",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expressao_atribuicao ::= ID op_atribuicao NUMEROS_REAIS OPERADOR_ARITMETICO ID FIM_LINHA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao_atribuicao",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expressao_atribuicao ::= ID op_atribuicao NUMEROS_NATURAIS OPERADOR_ARITMETICO NUMEROS_NATURAIS FIM_LINHA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao_atribuicao",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expressao_atribuicao ::= ID op_atribuicao NUMEROS_REAIS OPERADOR_ARITMETICO NUMEROS_REAIS FIM_LINHA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao_atribuicao",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expressao_atribuicao ::= ID op_atribuicao ID OPERADOR_ARITMETICO NUMEROS_REAIS FIM_LINHA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao_atribuicao",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expressao_atribuicao ::= ID op_atribuicao ID OPERADOR_ARITMETICO NUMEROS_NATURAIS FIM_LINHA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao_atribuicao",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expressao_repete ::= expressao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao_repete",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expressao_repete ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao_repete",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), (Symbol) RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
